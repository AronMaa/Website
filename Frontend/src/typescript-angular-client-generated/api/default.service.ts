/**
 * Learning Package API
 * API for managing learning packages and associated facts.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs';

import {LearningFact} from '../model/learningFact';
import {LearningPackage} from '../model/learningPackage';
import {PackageSummary} from '../model/packageSummary';
import {SwaggerJson} from '../model/swaggerJson';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class DefaultService {

  protected basePath = '/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Create a new fact for a learning package
   *
   * @param body Fact content to add
   * @param id Learning package ID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createLearningFact(body: LearningFact, id: number, observe?: 'body', reportProgress?: boolean): Observable<LearningFact>;
  public createLearningFact(body: LearningFact, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LearningFact>>;
  public createLearningFact(body: LearningFact, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LearningFact>>;
  public createLearningFact(body: LearningFact, id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createLearningFact.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling createLearningFact.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<LearningFact>('post', `${this.basePath}/api/package/${encodeURIComponent(String(id))}/fact`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create a new learning package
   *
   * @param body Learning package data
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createLearningPackage(body: LearningPackage, observe?: 'body', reportProgress?: boolean): Observable<LearningPackage>;
  public createLearningPackage(body: LearningPackage, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LearningPackage>>;
  public createLearningPackage(body: LearningPackage, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LearningPackage>>;
  public createLearningPackage(body: LearningPackage, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createLearningPackage.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<LearningPackage>('post', `${this.basePath}/api/package`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Delete a fact from a learning package
   *
   * @param id Learning package ID
   * @param factId Fact ID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteLearningFact(id: number, factId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteLearningFact(id: number, factId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteLearningFact(id: number, factId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteLearningFact(id: number, factId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteLearningFact.');
    }

    if (factId === null || factId === undefined) {
      throw new Error('Required parameter factId was null or undefined when calling deleteLearningFact.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('delete', `${this.basePath}/api/package/${encodeURIComponent(String(id))}/fact`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Delete a learning package
   *
   * @param id Learning package ID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteLearningPackage(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteLearningPackage(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteLearningPackage(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteLearningPackage(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteLearningPackage.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('delete', `${this.basePath}/api/package/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get all learning packages
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllPackages(observe?: 'body', reportProgress?: boolean): Observable<Array<LearningPackage>>;
  public getAllPackages(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LearningPackage>>>;
  public getAllPackages(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LearningPackage>>>;
  public getAllPackages(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<LearningPackage>>('get', `${this.basePath}/api/package`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get a learning package by ID
   *
   * @param id Learning package ID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPackageById(id: number, observe?: 'body', reportProgress?: boolean): Observable<LearningPackage>;
  public getPackageById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LearningPackage>>;
  public getPackageById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LearningPackage>>;
  public getPackageById(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getPackageById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<LearningPackage>('get', `${this.basePath}/api/package/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get all facts for a learning package
   *
   * @param id Learning package ID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPackageFacts(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<LearningFact>>;
  public getPackageFacts(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LearningFact>>>;
  public getPackageFacts(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LearningFact>>>;
  public getPackageFacts(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getPackageFacts.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<LearningFact>>('get', `${this.basePath}/api/package/${encodeURIComponent(String(id))}/fact`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get a list of package summaries
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPackageSummaries(observe?: 'body', reportProgress?: boolean): Observable<Array<PackageSummary>>;
  public getPackageSummaries(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PackageSummary>>>;
  public getPackageSummaries(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PackageSummary>>>;
  public getPackageSummaries(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<PackageSummary>>('get', `${this.basePath}/api/package-summaries`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get Swagger JSON
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSwaggerJson(observe?: 'body', reportProgress?: boolean): Observable<SwaggerJson>;
  public getSwaggerJson(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SwaggerJson>>;
  public getSwaggerJson(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SwaggerJson>>;
  public getSwaggerJson(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<SwaggerJson>('get', `${this.basePath}/swagger.json`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Liveness check
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public livenessCheck(observe?: 'body', reportProgress?: boolean): Observable<any>;
  public livenessCheck(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public livenessCheck(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public livenessCheck(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'text/plain'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('get', `${this.basePath}/api/liveness`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Search learning packages
   *
   * @param id Learning package ID
   * @param title Package title
   * @param category Package category
   * @param difficulty Package difficulty
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public searchLearningPackages(id?: number, title?: string, category?: string, difficulty?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<PackageSummary>>;
  public searchLearningPackages(id?: number, title?: string, category?: string, difficulty?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PackageSummary>>>;
  public searchLearningPackages(id?: number, title?: string, category?: string, difficulty?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PackageSummary>>>;
  public searchLearningPackages(id?: number, title?: string, category?: string, difficulty?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('id', <any>id);
    }
    if (title !== undefined && title !== null) {
      queryParameters = queryParameters.set('title', <any>title);
    }
    if (category !== undefined && category !== null) {
      queryParameters = queryParameters.set('category', <any>category);
    }
    if (difficulty !== undefined && difficulty !== null) {
      queryParameters = queryParameters.set('difficulty', <any>difficulty);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<PackageSummary>>('get', `${this.basePath}/api/package-summaries/search`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Update a fact for a learning package
   *
   * @param body Updated fact content
   * @param id Learning package ID
   * @param factId Fact ID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateLearningFact(body: LearningFact, id: number, factId: number, observe?: 'body', reportProgress?: boolean): Observable<LearningFact>;
  public updateLearningFact(body: LearningFact, id: number, factId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LearningFact>>;
  public updateLearningFact(body: LearningFact, id: number, factId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LearningFact>>;
  public updateLearningFact(body: LearningFact, id: number, factId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateLearningFact.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateLearningFact.');
    }

    if (factId === null || factId === undefined) {
      throw new Error('Required parameter factId was null or undefined when calling updateLearningFact.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<LearningFact>('put', `${this.basePath}/api/package/${encodeURIComponent(String(id))}/fact`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Update a learning package
   *
   * @param body Learning package data to update
   * @param id Learning package ID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateLearningPackage(body: LearningPackage, id: number, observe?: 'body', reportProgress?: boolean): Observable<LearningPackage>;
  public updateLearningPackage(body: LearningPackage, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LearningPackage>>;
  public updateLearningPackage(body: LearningPackage, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LearningPackage>>;
  public updateLearningPackage(body: LearningPackage, id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateLearningPackage.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateLearningPackage.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<LearningPackage>('put', `${this.basePath}/api/package/${encodeURIComponent(String(id))}`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
